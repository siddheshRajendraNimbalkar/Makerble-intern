// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: patients.sql

package db

import (
	"context"
	"database/sql"
)

const createPatient = `-- name: CreatePatient :one
INSERT INTO patients (full_name, age, gender, address, phone, status, created_by)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, full_name, age, gender, address, phone, status, created_by, created_at, updated_at
`

type CreatePatientParams struct {
	FullName  string         `db:"full_name" json:"full_name"`
	Age       int32          `db:"age" json:"age"`
	Gender    string         `db:"gender" json:"gender"`
	Address   sql.NullString `db:"address" json:"address"`
	Phone     sql.NullString `db:"phone" json:"phone"`
	Status    string         `db:"status" json:"status"`
	CreatedBy sql.NullInt32  `db:"created_by" json:"created_by"`
}

func (q *Queries) CreatePatient(ctx context.Context, arg CreatePatientParams) (Patient, error) {
	row := q.db.QueryRowContext(ctx, createPatient,
		arg.FullName,
		arg.Age,
		arg.Gender,
		arg.Address,
		arg.Phone,
		arg.Status,
		arg.CreatedBy,
	)
	var i Patient
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Age,
		&i.Gender,
		&i.Address,
		&i.Phone,
		&i.Status,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePatient = `-- name: DeletePatient :exec
DELETE FROM patients WHERE id = $1
`

func (q *Queries) DeletePatient(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletePatient, id)
	return err
}

const getPatient = `-- name: GetPatient :one
SELECT id, full_name, age, gender, address, phone, status, created_by, created_at, updated_at FROM patients WHERE id = $1
`

func (q *Queries) GetPatient(ctx context.Context, id int32) (Patient, error) {
	row := q.db.QueryRowContext(ctx, getPatient, id)
	var i Patient
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Age,
		&i.Gender,
		&i.Address,
		&i.Phone,
		&i.Status,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPatients = `-- name: ListPatients :many
SELECT id, full_name, age, gender, address, phone, status, created_by, created_at, updated_at FROM patients ORDER BY created_at DESC
`

func (q *Queries) ListPatients(ctx context.Context) ([]Patient, error) {
	rows, err := q.db.QueryContext(ctx, listPatients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Patient{}
	for rows.Next() {
		var i Patient
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Age,
			&i.Gender,
			&i.Address,
			&i.Phone,
			&i.Status,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePatient = `-- name: UpdatePatient :one
UPDATE patients
SET full_name = $2,
    age = $3,
    gender = $4,
    address = $5,
    phone = $6,
    status = $7,
    updated_at = NOW()
WHERE id = $1
RETURNING id, full_name, age, gender, address, phone, status, created_by, created_at, updated_at
`

type UpdatePatientParams struct {
	ID       int32          `db:"id" json:"id"`
	FullName string         `db:"full_name" json:"full_name"`
	Age      int32          `db:"age" json:"age"`
	Gender   string         `db:"gender" json:"gender"`
	Address  sql.NullString `db:"address" json:"address"`
	Phone    sql.NullString `db:"phone" json:"phone"`
	Status   string         `db:"status" json:"status"`
}

func (q *Queries) UpdatePatient(ctx context.Context, arg UpdatePatientParams) (Patient, error) {
	row := q.db.QueryRowContext(ctx, updatePatient,
		arg.ID,
		arg.FullName,
		arg.Age,
		arg.Gender,
		arg.Address,
		arg.Phone,
		arg.Status,
	)
	var i Patient
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Age,
		&i.Gender,
		&i.Address,
		&i.Phone,
		&i.Status,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
